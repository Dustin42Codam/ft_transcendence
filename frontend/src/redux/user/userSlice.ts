import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../store";
import axios from "axios";
import { User } from "../../models/User";

export async function fetchUser() {
  return await axios.get("users");
}

// Define a type for the slice state
interface UserState {
  data: User;
}

const initialState: UserState = {
  data: {
    id: 0,
    display_name: "hello",
    status: "",
    avatar: "",
    two_factor_auth: false,
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk("user/fetchUser", async () => {
  const response = await fetchUser();
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

// const fetchUserById = userId => {
// 	// the inside "thunk function"
// 	return async (dispatch, getState) => {
// 	  try {
// 		// make an async call in the thunk
// 		const user = await axios.get('users');
// 		// dispatch an action when we get the response back
// 		dispatch(userLoaded(user))
// 	  } catch (err) {
// 		// If something went wrong, handle it here
// 	  }
// 	}
//   }

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    fetch: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      //   state.data = fetchAsync();
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = 'loading';
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = 'idle';
  //         state.value += action.payload;
  //       });
  //   },
});

export const { fetch } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectUser = (state: RootState) => state.user.data;

export default userSlice.reducer;
