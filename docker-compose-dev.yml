version: '2.4'

services:
  backend:
    hostname: backend
    networks:
      - ft_trance
    build:
      context: ./backend
      target: dev
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
      - 3001:3001
      - 3002:3002
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src/:/backend/src/:delegated
    healthcheck:
        test: wget --no-verbose --tries=3 --spider http://127.0.0.1:3000/api/users || exit 1
        interval: 5s
        retries: 5 
        start_period: 5s
        timeout: 3s
  frontend:
    hostname: frontend
    networks:
      - ft_trance
    build:
      context: ./frontend
      target: dev
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    #   backend:
    #     condition: service_healthy
    volumes:
      - ./frontend/src/:/frontend/src/:delegated
    # healthcheck:
    #     test: wget --no-verbose --tries=3 --spider http://127.0.0.1:${FRONTEND_PORT}/ || exit 1
    #     interval: 5s
    #     retries: 5 
    #     start_period: 5s
    #     timeout: 3s

  # pgAdmin4:
  #   restart: always
  #   hostname: pgAdmin4
  #   image: dpage/pgadmin4
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   ports:
  #    - 8082:80
  #   networks:
  #    - ft_trance
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL:    ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #     GUNICORN_ACCESS_LOGFILE: "/tmp/pg.log" 
  #   healthcheck:
  #      test: wget --no-verbose --tries=1 --spider localhost:80 || exit 1
  #      interval: 5s
  #      retries: 5 
  #      start_period: 5s
  #      timeout: 3s
  postgres:
    restart: always
    hostname: postgres
    image: postgres:latest
    volumes:
      - ./postgres_vol/:/var/lib/postgresql/data:delegated
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - ft_trance
    environment:
      POSTGRES_PASSWORD:    ${POSTGRES_PASSWORD}
      POSTGRES_USER:        ${POSTGRES_USER}
      POSTGRES_DB:          ${POSTGRES_DB}
    healthcheck:
        test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
        interval: 5s
        retries: 5 
        start_period: 5s
        timeout: 3s

networks:
  ft_trance:
    driver: bridge
    name: ft_trance
